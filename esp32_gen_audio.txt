from machine import Pin, DAC
import time
import math

# Configuración del pin DAC (GPIO25 o GPIO26)
dac = DAC(Pin(25))  # Utiliza el canal DAC1 (GPIO25)

# Función para generar un tono de una frecuencia y duración específicas
def play_tone(frequency, duration):
    sample_rate = 8000  # Frecuencia de muestreo en Hz
    amplitude = 127     # Amplitud máxima para el DAC de 8 bits
    buffer_length = 100
    buf = bytearray(buffer_length)

    # Generar muestras de una onda sinusoidal
    for i in range(buffer_length):
        sample = int(128 + amplitude * math.sin(2 * math.pi * frequency * (i / sample_rate)))
        buf[i] = sample & 0xFF  # Asegurarse de que el valor esté en el rango de 0-255

    samples = int(sample_rate * duration)
    start_time = time.ticks_us()
    for i in range(samples):
        dac.write(buf[i % buffer_length])
        # Control de tiempo para mantener la frecuencia de muestreo
        elapsed = time.ticks_diff(time.ticks_us(), start_time)
        expected = int((i + 1) * (1e6 / sample_rate))
        delay = expected - elapsed
        if delay > 0:
            time.sleep_us(delay)

# Parámetros del experimento
frequent_stimulus_freq = 500    # Estímulo frecuente
distractor_freq = 1000          # Distractor
target_freq = 1500              # Target

stimulus_duration = 0.1         # Duración del estímulo en segundos
inter_stimulus_interval = 0.5   # Intervalo entre estímulos en segundos

import random

# Función para ejecutar el paradigma odd-ball
def run_paradigm():
    trials = 100  # Número de estímulos totales
    target_probability = 0.1  # Probabilidad de presentar un target
    distractor_probability = 0.1  # Probabilidad de presentar un distractor

    for _ in range(trials):
        rand_val = random.random()
        if rand_val < target_probability:
            # Presentar estímulo target
            play_tone(target_freq, stimulus_duration)
        elif rand_val < target_probability + distractor_probability:
            # Presentar distractor
            play_tone(distractor_freq, stimulus_duration)
        else:
            # Presentar estímulo frecuente
            play_tone(frequent_stimulus_freq, stimulus_duration)

        time.sleep(inter_stimulus_interval)

# Ejecutar el experimento
run_paradigm()